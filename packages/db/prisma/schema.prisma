// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  role          Role            @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions Submission[]
}

model Submission{
  id String @id @default(cuid())
  title String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code String
  fullCode String
  status STATUS @default(PENDING)
  testCases TestCase[]
  memory Int
  time Float
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  languageId Int
}

model Problem{
  id String @id @default(cuid())
  title String
  description String
  slug String
  difficulty Difficulty @default(MEDIUM)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions Submission[]
  defaultCode DefaultCode[]
}

model DefaultCode{
  id String @id @default(cuid())
  code String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String
  language Language @relation(fields: [languageId], references: [judge0Id], onDelete: Cascade)
  languageId Int  
  @@unique([problemId, languageId])
}

model TestCase{
  id String @id @default(cuid())
  // input String
  // output String
  memory Int
  time Float
  status TESTCASESTATUS @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String
  judge0SubmissionId Int
}

model Language{
  id Int @id
  name String
  judge0Id Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions Submission[]
  defaultCodes DefaultCode[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
}


enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum TESTCASESTATUS {
  PENDING
  AC
  FAIL
  TLE
  MLE
  COMPILE_ERROR
}